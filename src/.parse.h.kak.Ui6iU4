// A recursive descent parser is one which just implements the formal grammar
// using imperative code. the tree of function calls matches the tree specified
// by the formal grammer, and the resultant abstract syntax tree.
//
// This is simple.

#pragma once

struct 

struct {
} typedef BinaryExpr;

enum ExprType {
	EXPR_BYTE,
	EXPR_BINARY,
	EXPR_UNARY,
	EXPR_GROUP
};

struct {
	ExprType type;
	union {
		uint8_t byte;
		Expr expr;
	} value;
} typedef Expr;

struct {
	
} typedef ParseStatementResult;

// Parses and compiles tokens in a single pass, outputting a final executable
void parse_program(const Token* tokens);
void parse_statement(const Token* tokens, uint32_t current);
Expression parse_expression(const Token* tokens, uint32_t current);
